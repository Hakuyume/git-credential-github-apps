name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo fmt -- --check
  cargo-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo clippy -- --deny=warnings
  cargo-build:
    strategy:
      matrix:
        platform:
          - linux-amd64
          - linux-arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - if: matrix.platform == 'linux-amd64'
        run: |
          sudo apt-get install --no-install-recommends --yes musl-tools
          echo CARGO_BUILD_TARGET=x86_64-unknown-linux-musl >> ${GITHUB_ENV}
      - if: matrix.platform == 'linux-arm64'
        run: |
          sudo apt-get install --no-install-recommends --yes gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          echo CARGO_BUILD_TARGET=aarch64-unknown-linux-musl >> ${GITHUB_ENV}
          echo CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc >> ${GITHUB_ENV}
      - run: |
          rustup target add ${{ env.CARGO_BUILD_TARGET }}
          cargo build --release
          upx target/${{ env.CARGO_BUILD_TARGET }}/release/git-credential-github-apps
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/git-credential-github-apps
  docker:
    needs: cargo-build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/download-artifact@v4
      - run: |
          cat << 'EOD' > Dockerfile
          FROM alpine
          RUN apk add --no-cache ca-certificates git git-lfs
          ARG TARGETOS
          ARG TARGETARCH
          COPY --chmod=755 ${TARGETOS}-${TARGETARCH}/git-credential-github-apps /usr/local/bin/
          EOD
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/hakuyume/git-credential-github-apps:${{ github.sha }}
            ghcr.io/hakuyume/git-credential-github-apps
  oras:
    needs: cargo-build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/download-artifact@v4
      - if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - if: github.ref == 'refs/heads/main'
        run: echo REPOSITORY=ghcr.io/hakuyume/git-credential-github-apps >> ${GITHUB_ENV}
      - if: github.ref != 'refs/heads/main'
        run: |
          docker run --detach --publish=5000:5000 ghcr.io/distribution/distribution:edge
          echo REPOSITORY=localhost:5000/temp >> ${GITHUB_ENV}
      - run: |
          for PLATFORM in linux-amd64 linux-arm64
          do
              (cd ${PLATFORM} && oras push --export-manifest=manifest.json ${{ env.REPOSITORY }} git-credential-github-apps)
          done
          jq --compact-output << EOD | tee manifest.json
          {
            "schemaVersion": 2,
            "mediaType": "application/vnd.oci.image.index.v1+json",
            "manifests": [
              {
                "mediaType": "application/vnd.oci.image.manifest.v1+json",
                "artifactType": "application/vnd.unknown.artifact.v1",
                "digest": "sha256:$(sha256sum linux-amd64/manifest.json | head --bytes=64)",
                "size": $(cat linux-amd64/manifest.json | wc --bytes),
                "platform": {"os": "linux", "architecture": "amd64"}
              },
              {
                "mediaType": "application/vnd.oci.image.manifest.v1+json",
                "artifactType": "application/vnd.unknown.artifact.v1",
                "digest": "sha256:$(sha256sum linux-arm64/manifest.json | head --bytes=64)",
                "size": $(cat linux-arm64/manifest.json | wc --bytes),
                "platform": {"os": "linux", "architecture": "arm64"}
              }
            ]
          }
          EOD
          oras manifest push ${{ env.REPOSITORY }}:${{ github.sha }}-oras,oras manifest.json
